from deepface import DeepFace
import sys
import os
import cv2
import random
import csv
from datetime import datetime
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QLabel, QPushButton, QTableWidgetItem,
    QTextEdit, QVBoxLayout, QWidget, QHBoxLayout, QTableWidget, QMessageBox, QGraphicsDropShadowEffect
)
from PyQt5.QtGui import QImage, QPixmap, QColor
from PyQt5.QtCore import QTimer, Qt, QPropertyAnimation

class FaceAnalyzer:
    def detect_faces(self, frame_rgb):
        results = DeepFace.analyze(frame_rgb, actions=['emotion'], enforce_detection=False)
        faces = []

        if isinstance(results, list):
            for r in results:
                faces.append({
                    "bbox": r["region"],
                    "dominant_emotion": r["dominant_emotion"]
                })
        else:
            r = results
            faces.append({
                "bbox": r["region"],
                "dominant_emotion": r["dominant_emotion"]
            })

        for f in faces:
            region = f["bbox"]
            if isinstance(region, dict):
                x = region.get("x", 0)
                y = region.get("y", 0)
                w = region.get("w", 0)
                h = region.get("h", 0)
                f["bbox"] = (x, y, x + w, y + h)
            else:
                f["bbox"] = (0, 0, 0, 0)
        return faces

class FaceGameApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("AI X√öC C·∫¢M - C·∫¢M N·∫ÆNG AI")
        self.setGeometry(100, 100, 1200, 800)

        self.setStyleSheet("""
            QWidget {
                background-color: #f0f4f8;
                font-family: 'Segoe UI', 'Roboto', sans-serif;
                font-size: 14px;
                color: #2e2e2e;
            }
            QMainWindow {
                background-color: #007ACC;
                font-family: 'Segoe UI', sans-serif;
            }
            QLabel {
                font-size: 24px;
                font-weight: bold;
                color: white;
            }
            QTextEdit {
                font-size: 20px;
            }
            QTableWidget {
                font-size: 20px;
            }
            QHeaderView::section {
                background-color: #e1e1e1;
                padding: 4px;
                font-size: 20px;
                border: none;
                font-weight: bold;
            }
            QTableWidget::item {
                padding: 4px;
            }
            QTableWidget, QTextEdit {
                background-color: #ffffff;
                border-radius: 12px;
                border: 1px solid #d0d0d0;
                padding: 10px;
            }
        """)

        self.image_label = QLabel()
        self.image_label.setAlignment(Qt.AlignCenter)
        self.image_label.setScaledContents(True)
        self.image_label.setContentsMargins(1, 1, 1, 1)
        self.image_label.setFixedSize(1200,950)
        self.image_label.setStyleSheet("""
            border-radius: 15px;
            border: 3px solid #ccc;
            background-color: #66B2FF;
        """)
        self.apply_shadow(self.image_label)

        self.start_button = QPushButton("üé≠ B·∫Øt ƒë·∫ßu ch∆°i")
        self.start_button.setStyleSheet(self.button_style())
        self.start_button.clicked.connect(self.start_game)

        self.save_button = QPushButton("üì• L∆∞u k·∫øt qu·∫£")
        self.save_button.setStyleSheet(self.button_style())
        self.save_button.clicked.connect(self.save_result)

        self.info_label = QLabel("Nh·∫•n v√†o 'B·∫Øt ƒë·∫ßu ch∆°i' ƒë·ªÉ b·∫Øt ƒë·∫ßu!")
        self.info_label.setStyleSheet("""
            background-color: white;
            border-radius: 16px;
            padding: 16px 24px;
            font-size: 24px;
            font-weight: bold;
            color: green;
            border: 1px solid #e0e0e0;
        """)
        self.apply_shadow(self.info_label)

        self.table = QTableWidget()
        self.table.setColumnCount(2)
        self.table.setHorizontalHeaderLabels(["Ng∆∞·ªùi ch∆°i", "Ch·ªâ s·ªë c·∫£m x√∫c (%)"])
        self.table.verticalHeader().setVisible(False)
        self.table.setEditTriggers(QTableWidget.NoEditTriggers)
        self.table.setSelectionMode(QTableWidget.NoSelection)
        self.table.setFixedHeight(200)
        self.table.setStyleSheet("""
            QTableWidget {
                background-color: #66B2FF;
                border: 1px solid #ccc;
                border-radius: 12px;
            }
            QWidget {background-color: #66B2FF;}
        """)
        self.apply_shadow(self.table)

        self.suggestion_box = QTextEdit()
        self.suggestion_box.setReadOnly(True)
        self.suggestion_box.setPlaceholderText("ü§ñ Th·ª≠ th√°ch s·∫Ω hi·ªán t·∫°i ƒë√¢y...")
        self.suggestion_box.setStyleSheet("""
            background-color: #66B2FF;
            border: 1px solid #ccc;
            border-radius: 12px;
            padding: 12px;
            color: white;
            font-size: 30px;
        """)
        self.apply_shadow(self.suggestion_box)

        self.face_label = QLabel()
        self.face_label.setFixedSize(200, 200)
        self.face_label.setStyleSheet("""
            QLabel {
                background-color: #66B2FF;
                border-radius: 12px;
                border: 1px solid #cccccc;
                padding: 5px;
            }
        """)
        self.apply_shadow(self.face_label)

        button_layout = QHBoxLayout()
        button_layout.addWidget(self.start_button)
        button_layout.addWidget(self.save_button)

        right_layout = QVBoxLayout()
        right_layout.setSpacing(12)
        right_layout.addLayout(button_layout)
        right_layout.addWidget(self.info_label)
        right_layout.addWidget(QLabel("üìä Ph√¢n t√≠ch c·∫£m x√∫c:"))

        left_of_right = QVBoxLayout()
        left_of_right.addWidget(self.table)

        right_of_right = QVBoxLayout()
        right_of_right.addWidget(self.face_label)

        self.right_content_layout = QHBoxLayout()
        self.right_content_layout.addLayout(left_of_right)
        self.right_content_layout.addLayout(right_of_right)
        right_layout.addLayout(self.right_content_layout)

        right_layout.addWidget(QLabel("üéØ Th·ª≠ th√°ch:"))
        right_layout.addWidget(self.suggestion_box)

        main_layout = QHBoxLayout()
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(20)
        main_layout.addWidget(self.image_label, 2)
        main_layout.addLayout(right_layout, 1)

        container = QWidget()
        container.setLayout(main_layout)
        self.setCentralWidget(container)
        container.setStyleSheet("background-color: #005F9E;")

        self.cap = cv2.VideoCapture(0)
        self.face_analyzer = FaceAnalyzer()
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_frame)
        self.timer.start(30)

        self.countdown_timer = QTimer()
        self.countdown_timer.timeout.connect(self.update_countdown)
        self.countdown = 7

        self.current_frame = None
        self.target_emotion = ""
        self.detecting = False

        self.showMaximized()

    def button_style(self):
        return ("""
            QPushButton {
                background-color: green;
                color: white;
                border: none;
                border-radius: 10px;
                padding: 10px 20px;
                font-weight: bold;
                font-size: 23px;
            }
            QPushButton:hover {
                background-color: #006400;
            }
            QPushButton:pressed {
                background-color: #004B49;
            }
        """)
    
    def fade_in_widget(self, widget, duration=400):
        widget.setWindowOpacity(0)
        widget.setVisible(True)
        animation = QPropertyAnimation(widget, b"windowOpacity")
        animation.setDuration(duration)
        animation.setStartValue(0)
        animation.setEndValue(1)
        animation.start()
        # Gi·ªØ animation l·∫°i n·∫øu c·∫ßn (tr√°nh b·ªã GC)
        self._current_animation = animation

    def apply_shadow(self, widget):
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(15)               # ƒê·ªô m·ªù c·ªßa b√≥ng
        shadow.setXOffset(0)                   # ƒê·ªô l·ªách ngang
        shadow.setYOffset(4)                   # ƒê·ªô l·ªách d·ªçc
        shadow.setColor(QColor(0, 0, 0, 160))  # M√†u b√≥ng (ƒëen, ƒë·ªô m·ªù 160)
        widget.setGraphicsEffect(shadow)

    def update_frame(self):
        ret, frame = self.cap.read()
        if not ret:
            return
        frame = cv2.flip(frame, 1)
        self.current_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        faces = self.face_analyzer.detect_faces(self.current_frame)

        for face in faces:
            x1, y1, x2, y2 = face["bbox"]
            emotion = face["dominant_emotion"]
            cv2.rectangle(self.current_frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.putText(self.current_frame, emotion, (x1, y1 - 10),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)

        image = QImage(self.current_frame, self.current_frame.shape[1], self.current_frame.shape[0], QImage.Format_RGB888)
        pixmap = QPixmap.fromImage(image)
        self.image_label.setPixmap(pixmap.scaled(self.image_label.size(), Qt.KeepAspectRatio))

    def start_game(self):
        self.target_emotion = random.choice(['happy', 'sad', 'angry', 'surprise', 'fear', 'disgust', 'neutral'])
        self.info_label.setText(f"üòÆ H√£y l√†m m·∫∑t: {self.target_emotion.upper()} ‚Äì s·∫µn s√†ng trong 5 gi√¢y...")
        self.countdown = 5
        self.countdown_timer.start(1000)

    def update_countdown(self):
        self.countdown -= 1
        if self.countdown > 0:
            self.info_label.setText(f"‚è≥ Di·ªÖn theo bi·ªÉu c·∫£m '{self.target_emotion.upper()}' trong {self.countdown} gi√¢y...")
        else:
            self.countdown_timer.stop()
            self.info_label.setText("üîç ƒêang t√¨m ng∆∞·ªùi l√†m AI c·∫£m n·∫Øng...")
            self.detecting = True
            QTimer.singleShot(1000, self.detect_emotion)

    def detect_emotion(self):
        try:
            results = DeepFace.analyze(self.current_frame, actions=['emotion'], enforce_detection=False)

            if not isinstance(results, list):
                results = [results]

            emotion_scores = []  # L∆∞u l·∫°i score c·ªßa target_emotion theo t·ª´ng ng∆∞·ªùi

            self.table.setRowCount(len(results))
            for idx, res in enumerate(results):
                score = res['emotion'].get(self.target_emotion, 0)  # ƒêi·ªÉm c·∫£m x√∫c c·∫ßn thi·∫øt

                emotion_scores.append(score)

                self.table.setItem(idx, 0, QTableWidgetItem(f"Player {idx+1}"))
                self.table.setItem(idx, 1, QTableWidgetItem(f"{score:.1f}"))

            # So s√°nh v√† t√¨m ng∆∞·ªùi c√≥ score th·∫•p nh·∫•t cho target_emotion
            if emotion_scores:
                weakest_index = emotion_scores.index(min(emotion_scores))
                self.info_label.setText(f"üôÉ Ng∆∞·ªùi ch∆°i {weakest_index+1} ƒë√£ l√†m AI ƒë·ªï v√¨ bi·ªÉu c·∫£m c·ªßa m√¨nh!")
            
                result = results[weakest_index]

                self.emotion_scores = result['emotion']
                self.current_emotion = result['dominant_emotion']

                face_img = result["region"]
                x, y, w, h = face_img["x"], face_img["y"], face_img["w"], face_img["h"]
                self.detected_face_image = self.current_frame
                face_crop = self.current_frame[y:y + h, x:x + w]
                face_labeled = self.draw_label_on_face(face_crop, self.current_emotion)

                qimg = QImage(face_labeled.data, face_labeled.shape[1], face_labeled.shape[0], face_labeled.strides[0], QImage.Format_RGB888)
                pix = QPixmap.fromImage(qimg)
                self.face_label.setPixmap(pix.scaled(self.face_label.size(), Qt.KeepAspectRatio))

                self.ask_suggestion()

            else:
                self.info_label.setText("üòÖ Ch∆∞a t√¨m ƒë∆∞·ª£c ai c·∫£m n·∫Øng AI r·ªìi.")

        except Exception as e:
            self.info_label.setText(f"‚ö†Ô∏è Detection Error: {str(e)}")

    def draw_label_on_face(self, img, emotion):
        color_map = {
            "happy": (241, 196, 15),
            "sad": (52, 152, 219),
            "angry": (231, 76, 60),
            "surprise": (155, 89, 182),
            "fear": (52, 73, 94),
            "disgust": (46, 204, 113),
            "neutral": (149, 165, 166)
        }
        label_color = color_map.get(emotion.lower(), (0, 0, 0))
        labeled_img = img.copy()

        # V·∫Ω khung vi·ªÅn m√†u theo c·∫£m x√∫c
        cv2.rectangle(labeled_img, (0, 0), (labeled_img.shape[1]-1, labeled_img.shape[0]-1), label_color, thickness=4)

        # V·∫Ω label
        text = emotion.capitalize()
        font = cv2.FONT_HERSHEY_SIMPLEX
        scale = 0.8
        thickness = 2
        text_size = cv2.getTextSize(text, font, scale, thickness)[0]
        text_x = 5
        text_y = text_size[1] + 10

        cv2.putText(labeled_img, text, (text_x, text_y), font, scale, label_color, thickness, lineType=cv2.LINE_AA)
        return labeled_img

    def ask_suggestion(self):
            challenges = {
                "angry": [
        "Khoanh tay tr∆∞·ªõc ng·ª±c, m·∫∑t cau c√≥, m√¥i m√≠m ch·∫∑t.",
        "Ch·ªëng n·∫°nh, m·∫∑t nghi√™ng m·ªôt b√™n, m·∫Øt nh√¨n tr·ª´ng tr·ª´ng.",
        "Gi∆° n·∫Øm ƒë·∫•m tr∆∞·ªõc m·∫∑t, m·∫∑t cau l·∫°i, l√¥ng m√†y chau.",
        "Ch·ªâ tay v·ªÅ ph√≠a tr∆∞·ªõc nh∆∞ ƒëang ƒëe d·ªça ai ƒë√≥.",
        "Hai tay ƒëan ch√©o, n·∫Øm ch·∫∑t, nghi·∫øn rƒÉng.",
        "N·∫Øm tay ƒë·∫≠p nh·∫π v√†o l√≤ng b√†n tay c√≤n l·∫°i.",
        "ƒê·ª©ng ch·ªëng h√¥ng, nghi√™ng ng∆∞·ªùi, m·∫∑t khinh kh·ªânh.",
        "Tay gi·∫≠t nh·∫π t√≥c ho·∫∑c vu·ªët ng∆∞·ª£c t√≥c ra sau (ki·ªÉu gi·∫≠n ƒëi√™n ng∆∞·ªùi).",
        "M·∫∑t cau c√≥, ph·ªìng m√°, m·∫Øt nh√¨n l·ªách sang m·ªôt b√™n.",
        "B∆∞·ªõc ch√¢n v·ªÅ tr∆∞·ªõc m·ªôt b∆∞·ªõc, tay n·∫Øm th√†nh n·∫Øm ƒë·∫•m, h∆°i khom ng∆∞·ªùi."
    ],
    "neutral": [
        "ƒê·ª©ng th·∫≥ng, hai tay xu√¥i t·ª± nhi√™n, m·∫∑t th·∫£n nhi√™n.",
        "Khoanh tay, g∆∞∆°ng m·∫∑t nghi√™m t√∫c, m·∫Øt nh√¨n th·∫≥ng.",
        "Tay ƒë√∫t t√∫i qu·∫ßn, m·∫Øt nh√¨n th·∫≥ng, g∆∞∆°ng m·∫∑t b√¨nh th·∫£n.",
        "M·ªôt tay c·∫ßm c·∫±m, m·∫Øt nh√¨n xa xƒÉm.",
        "Ng·ªìi tr√™n gh·∫ø, ch√¢n b·∫Øt ch√©o, m·∫∑t l·∫°nh l√πng.",
        "ƒê·ª©ng nghi√™ng ng∆∞·ªùi, tay ch·ªëng nh·∫π v√†o h√¥ng.",
        "Hai tay th·∫£ l·ªèng, m·∫Øt nh√¨n th·∫≥ng camera.",
        "Tay ƒëan v√†o nhau tr∆∞·ªõc b·ª•ng, m·∫∑t kh√¥ng c·∫£m x√∫c.",
        "M·ªôt tay ch·ªëng c·∫±m, m·∫Øt nh√¨n nghi√™ng.",
        "Kho√°c balo/t√∫i, ƒë·ª©ng th·∫≥ng, √°nh m·∫Øt xa xƒÉm."
    ],
    "sad": [
        "C√∫i ƒë·∫ßu, m·∫Øt nh√¨n xu·ªëng, tay √¥m vai ho·∫∑c tay bu√¥ng th√µng.",
        "M·ªôt tay che m·∫∑t, m·∫Øt bu·ªìn.",
        "Ng·ªìi co ng∆∞·ªùi, tay √¥m g·ªëi.",
        "Tay ch·ªëng m√°, nh√¨n xa xƒÉm, m·∫∑t bu·ªìn.",
        "Tay ƒë·∫∑t l√™n ng·ª±c, m·∫Øt nh·∫Øm h·ªù.",
        "Hai tay ch·ªëng h√¥ng, vai r≈© xu·ªëng.",
        "M·ªôt tay c·∫ßm khƒÉn gi·∫•y (ho·∫∑c tay gi·∫£ l√†m c·∫ßm khƒÉn), m·∫∑t s·ª•t s√πi.",
        "T·ª±a ƒë·∫ßu v√†o t∆∞·ªùng, m·∫Øt lim dim.",
        "Hai tay √¥m ƒë·∫ßu, m·∫∑t r·∫ßu rƒ©.",
        "N·∫±m nghi√™ng, m·ªôt tay ch·ªëng ƒë·∫ßu, √°nh m·∫Øt xa xƒÉm."
    ],
    "happy": [
        "Hai tay gi∆° ch·ªØ V, c∆∞·ªùi t∆∞∆°i.",
        "Nh·∫£y nh·∫π l√™n, tay dang r·ªông.",
        "M·ªôt tay ch·ªëng h√¥ng, tay kia gi∆° ng√≥n c√°i üëç.",
        "Tay gi∆° cao v·∫´y ch√†o, mi·ªáng c∆∞·ªùi l·ªõn.",
        "Hai tay n·∫Øm th√†nh ƒë·∫•m, gi∆° ngang ng·ª±c nh∆∞ ‚ÄúYes!‚Äù.",
        "M·ªôt tay ch·ªëng c·∫±m, tay kia ch·ªëng m√°, m·∫Øt c∆∞·ªùi.",
        "ƒê·ª©ng nghi√™ng ng∆∞·ªùi, c∆∞·ªùi toe to√©t.",
        "Hai tay ƒëan v√†o nhau tr∆∞·ªõc ng·ª±c, c∆∞·ªùi h·∫°nh ph√∫c.",
        "T·ª±a tay v√†o vai ai ƒë√≥ ho·∫∑c gi·∫£ b·ªô c√≥ vai ng∆∞·ªùi b√™n c·∫°nh, c∆∞·ªùi t∆∞∆°i.",
        "ƒê·ª©ng d·∫°ng ch√¢n, tay ch·ªëng h√¥ng, m·∫Øt c∆∞·ªùi."
    ],
    "surprise": [
        "Mi·ªáng m·ªü ch·ªØ O, tay √¥m m√°.",
        "M·ªôt tay che mi·ªáng, m·∫Øt m·ªü to.",
        "Hai tay dang ra, m·∫∑t ng·∫°c nhi√™n.",
        "Tay gi∆° l√™n cao, m·∫∑t h·ªët ho·∫£ng.",
        "M·ªôt tay ch·ªëng c·∫±m, tay kia ƒë·ªÉ ngang mi·ªáng.",
        "Nghi√™ng ng∆∞·ªùi, m·∫Øt tr·ª£n to, tay ch·ªëng ng·ª±c.",
        "Hai tay ch·∫Øp l·∫°i ki·ªÉu ‚ÄúTr·ªùi ∆°i tin ƒë∆∞·ª£c kh√¥ng?‚Äù.",
        "M·ªôt tay ch·ªëng h√¥ng, tay kia ch·ªâ l√™n tr·ªùi, m·∫∑t b·∫•t ng·ªù.",
        "C√∫i nh·∫π ng∆∞·ªùi v·ªÅ tr∆∞·ªõc, m·∫Øt m·ªü to, tay x√≤e.",
        "Hai tay ch·ªëng ƒë·∫ßu, m·∫∑t ho·∫£ng h·ªët."
    ],
    "disgust": [
        "M·ªôt tay b·ªãt m≈©i, m·∫∑t nhƒÉn nh√≥.",
        "Hai tay dang ra, m·∫∑t cau c√≥ ki·ªÉu ‚Äúeww‚Äù.",
        "M·ªôt tay ch·ªëng c·∫±m, m·∫∑t m√©o m√≥.",
        "Tay che mi·ªáng nh∆∞ mu·ªën n√¥n.",
        "Tay ch·ªâ v√†o th·ª© g√¨ ƒë√≥, m·∫∑t kh√≥ ch·ªãu.",
        "Tay ch·ªëng h√¥ng, nghi√™ng ƒë·∫ßu, m·∫∑t gh√™ t·ªüm.",
        "Hai tay xua xua, m·∫∑t l·∫Øc ƒë·∫ßu.",
        "M·ªôt tay ƒë∆∞a ra ph√≠a tr∆∞·ªõc nh∆∞ ƒë·∫©y ra xa.",
        "Tay ch·ªëng ng·ª±c, m·∫∑t nhƒÉn nh√≥.",
        "M·∫∑t cau c√≥, tay xua tr∆∞·ªõc m·∫∑t nh∆∞ xua ƒëu·ªïi."
    ],
    "fear": [
        "Hai tay √¥m ƒë·∫ßu, m·∫Øt m·ªü to.",
        "Hai tay che mi·ªáng, m·∫∑t h·ªët ho·∫£ng.",
        "Hai tay gi∆° ra ch·∫Øn tr∆∞·ªõc ng·ª±c nh∆∞ t·ª± v·ªá.",
        "M·ªôt tay √¥m vai, m·ªôt tay ƒë∆∞a ra tr∆∞·ªõc.",
        "Tay run run, m·∫∑t lo l·∫Øng.",
        "Ng·ªìi co ch√¢n, tay √¥m g·ªëi.",
        "Tay n·∫Øm ch·∫∑t v·∫°t √°o ho·∫∑c c·ªï √°o, m·∫∑t ho·∫£ng lo·∫°n.",
        "M·∫Øt nh√¨n xung quanh, tay b·∫•u ch·∫∑t v√†o nhau.",
        "M·ªôt tay ch·ªâ sang m·ªôt b√™n, m·∫∑t ho·∫£ng h·ªët.",
        "Nghi√™ng ng∆∞·ªùi, tay √¥m ƒë·∫ßu, m·∫∑t s·ª£ s·ªát."
    ]
            }

            # L·∫•y danh s√°ch th·ª≠ th√°ch t∆∞∆°ng ·ª©ng ho·∫∑c m·∫∑c ƒë·ªãnh
            suggestion_list = challenges.get(self.current_emotion)
            suggestion = random.choice(suggestion_list)

            self.suggestion_box.setText(f"ü§ñ L√†m theo m√¨nh nh√©: {suggestion} \n \nHo√†n th√†nh th·ª≠ th√°ch v√† ghi l·∫°i kho·∫£nh kh·∫Øc n√†y b·∫±ng c√°ch ch·ª•p h√¨nh m√†n ch∆°i l√™n mxh k√®m theo hashtag #9.5AISTAR #Khainhan ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c qu√† t·ª´ ch∆∞∆°ng tr√¨nh nh√©! <3")

    def save_result(self):
        if self.current_frame is None or not self.current_emotion:
            QMessageBox.warning(self, "Warning", "No data to save.")
            return

        try:
            os.makedirs("snapshots", exist_ok=True)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            img_path = f"snapshots/face_{timestamp}.jpg"
            cv2.imwrite(img_path, cv2.cvtColor(self.detected_face_image, cv2.COLOR_RGB2BGR))

            csv_file = "results.csv"
            file_exists = os.path.isfile(csv_file)
            emotion_data = ", ".join([f"{k}:{v:.1f}%" for k, v in self.emotion_scores.items()])
            suggestion = self.suggestion_box.toPlainText()

            with open(csv_file, mode="a", newline='', encoding='utf-8-sig') as f:
                writer = csv.writer(f)
                if not file_exists:
                    writer.writerow(["Timestamp", "Dominant Emotion", "All Emotions", "Suggestion", "Image Path"])
                writer.writerow([timestamp, self.current_emotion, emotion_data, suggestion, img_path])

            QMessageBox.information(self, "Saved", "M√†n ch∆°i ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!")
        except Exception as e:
            QMessageBox.critical(self, "Error", f"L∆∞u th·∫•t b·∫°i:\n{str(e)}")  

    def closeEvent(self, event):
        self.cap.release()
        event.accept()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    win = FaceGameApp()
    win.show()
    sys.exit(app.exec_())